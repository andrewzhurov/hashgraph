{:deps  true
 :nrepl {:port 8702}

 ;; "." for /static
 :dev-http {3002 ["public" "."]}

 :js-options {:js-package-dirs ["node_modules"]}

 :builds
 {
  ;; <- just for getting a stable connection for repling, optional
  :repl
  {:target     :browser
   :output-dir "public/js"
   :modules    {:repl {:entries    [hashgraph.app.core]
                       :web-worker true}}}

  ;; you need to release it, before :app build is usable
  :sw
  {:target     :browser
   :output-dir "public/js"
   :modules    {:sw {:entries    [cljs-thread.sw]
                     :web-worker true}}}

  :app
  {:target           :browser
   :output-dir       "public/js" ; <- necessary because sw.js must be in root, but output-dir doesn't work per module
   :compiler-options {:optimizations      :advanced
                      :infer-externs      :auto
                      :output-feature-set :es-next-in
                      :source-map         true
                      :warnings           {:fn-deprecated      false
                                           :redef              false
                                           :invalid-arithmetic false
                                           :undeclared-var     false}
                      :reader-features    #{:dev}}
   ;;:dev              {:compiler-options {:reader-features #{:dev}}}
   :release          {:compiler-options {:reader-features #{:release}}}
   :closure-defines  {goog.debug.LOGGING_ENABLED false}
   :build-hooks      [(portal.shadow.remote/hook)]
   :devtools         {:before-load hashgraph.app.screen/stop  ;; before live-reloading any code call this function
                      :after-load  hashgraph.app.screen/start ;; after live-reloading finishes call this function
                      :watch-path  "/public"
                      :preloads    [shadow.remote.runtime.cljs.browser
                                    portal.shadow.preload]}
   :modules          {:shared {:entries []}
                      :screen {:init-fn    hashgraph.app.screen/init
                               :depends-on #{:shared}}
                      :core   {:init-fn    hashgraph.app.core/init
                               :depends-on #{:shared}
                               :web-worker true}}}
  }

 #_#_
 :builds
 {:app {:target        :browser
        :module-loader true
        :js-options    {:ignore-asset-requires true} ;; handle `require(xxx.css)`
        :modules       {:main {:init-fn hashgraph.app.core/init}}

        :output-dir       "./public/js"
        :asset-path       "/public/js"
        :release          {:asset-path "https://asset.logseq.com/static/js"}
        :compiler-options {:optimizations      :advanced
                           :infer-externs      :auto
                           :output-feature-set :es-next-in
                           :source-map         true
                           :externs            ["datascript/externs.js"
                                                "externs.js"]
                           :warnings           {:fn-deprecated false
                                                :redef         false}}
        :closure-defines  {goog.debug.LOGGING_ENABLED true}

        ;; NOTE: electron, browser/mobile-app use different asset-paths.
        ;;   For browser/mobile-app devs, assets are located in /static/js(via HTTP root).
        ;;   For electron devs, assets are located in ./js(via relative path).
        ;; :dev      {:asset-path "./js"}
        :build-hooks [(portal.shadow.remote/hook)]
        :devtools    {:before-load hashgraph.app.core/stop  ;; before live-reloading any code call this function
                      :after-load  hashgraph.app.core/start ;; after live-reloading finishes call this function
                      :watch-path  "/static"
                      :preloads    [shadow.remote.runtime.cljs.browser
                                    portal.shadow.preload]}}

  :repl ; <- just for getting a stable connection for repling, optional
  {:target     :browser
   :output-dir "./public/js"
   :asset-path "./public/js"
   :modules    {:repl {:entries    [hashgraph.app.core]
                       :web-worker true}}}
  :sw
  {:target     :browser
   :output-dir "./public/js"
   :modules    {:sw {:entries    [hashgraph.app.core]
                     :web-worker true}}}
  ;; :core
  ;; {:target     :browser
  ;;  :output-dir "./public/js"
  ;;  :modules
  ;;  {:shared {:entries []}
  ;;   :screen
  ;;   {:init-fn    hashgraph.app.screen/init!
  ;;    :depends-on #{:shared}}
  ;;   :core
  ;;   {:init-fn    hashgraph.app.core/init!
  ;;    :depends-on #{:shared}
  ;;    :web-worker true}}}
  }

  #_#_
  :test {:target           :node-test
         :output-to        "static/tests.js"
         :closure-defines  {frontend.util/NODETEST true}
         :devtools         {:enabled false}
         ;; disable :static-fns to allow for with-redefs and repl development
         :compiler-options {:static-fns false}
         :main             frontend.test.frontend-node-test-runner/main}

  #_#_
  :gen-malli-kondo-config {:target           :node-script
                           :closure-defines  {frontend.util/NODETEST true}
                           :devtools         {:enabled false}
                           :compiler-options {:static-fns false}
                           :output-to        "static/gen-malli-kondo-config.js"
                           :main             gen-malli-kondo-config.core/main}

  ;; :publishing {:target        :browser
  ;;              :module-loader true
  ;;              :js-options    {:ignore-asset-requires true}
  ;;              :modules       {:main
  ;;                              {:init-fn frontend.publishing/init}}

  ;;              :output-dir       "./public/js/publishing"
  ;;              :asset-path       "/public/js"
  ;;              :closure-defines  {}
  ;;              :compiler-options {:infer-externs      :auto
  ;;                                 :output-feature-set :es-next
  ;;                                 :warnings           {:fn-deprecated false
  ;;                                                      :redef         false}}
  ;;              :devtools         {:before-load hashgraph.app.core/stop
  ;;                                 :after-load  hashgraph.app.core/start
  ;;                                 :preloads    [devtools.preload
  ;;                                               portal.shadow.preload]}}
 }
