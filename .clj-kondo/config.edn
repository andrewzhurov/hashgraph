{:linters
 {:path-invalid-construct/string-join {:level :info}
  :regex-checks/double-escaped-regex {:level :warning}
  :aliased-namespace-symbol {:level :warning}
  ;; Disable until it doesn't trigger false positives on rum/defcontext
  :earmuffed-var-not-dynamic {:level :off}
  ;; Disable until we decide to use conj! as recommended in docs
  :unused-value {:level :off}
  :unresolved-symbol {:exclude [goog.DEBUG
                                goog.string.unescapeEntities
                                ;; TODO:lint: Fix when fixing all type hints
                                object]}
  ;; TODO:lint: Remove node-path excludes once we have a cleaner api
  :unresolved-var {:exclude [frontend.util/node-path.basename
                             frontend.util/node-path.dirname
                             frontend.util/node-path.join
                             frontend.util/node-path.extname
                             frontend.util/node-path.name
                             ;; frontend.pubsub/def-mult-or-pub generate vars clj-kondo cannot resolve
                             frontend.pubsub]}

  :consistent-alias
  {:aliases {cljs.reader reader
             cljs-time.core t
             cljs-time.coerce tc
             medley.core medley
             "path" node-path
             promesa.core p}}

  :namespace-name-mismatch {:level :warning}
  :used-underscored-binding {:level :warning}}

 :hooks {:analyze-call {rum.core/defc hooks.rum/defc
                        rum.core/defcs hooks.rum/defcs
                        hashgraph.utils/defnm hooks.hashgraph/defnm
                        clojure.string/join hooks.path-invalid-construct/string-join
                        clojure.string/replace hooks.regex-checks/double-escaped-regex}}
 :lint-as {;; hashgraph.utils/defnm clojure.core/defn
           hashgraph.utils/letl clojure.core/let
           promesa.core/let clojure.core/let
           promesa.core/loop clojure.core/loop
           promesa.core/recur clojure.core/recur
           rum.core/defcc rum.core/defc
           rum.core/with-context clojure.core/let
           rum.core/defcontext clojure.core/def
           clojure.test.check.clojure-test/defspec clojure.core/def
           clojure.test.check.properties/for-all clojure.core/for
           ;; src/main
           frontend.modules.outliner.datascript/auto-transact! clojure.core/let
           frontend.namespaces/import-vars potemkin/import-vars
           ;; src/test
           frontend.test.helper/deftest-async clojure.test/deftest
           frontend.test.helper/with-reset cljs.test/async
           frontend.react/defc clojure.core/defn
           cljs.core/defn clojure.core/defn}
 :skip-comments true
 :output {:progress true}}
